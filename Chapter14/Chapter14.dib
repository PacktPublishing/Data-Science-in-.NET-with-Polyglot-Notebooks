#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"}]}}

#!markdown

# Chapter 14: Extending Polyglot Notebooks

#!markdown

Note: some portions of this chapter rely on features of Polyglot Notebooks that may still be in preview. You may need to switch to the **preview version** of the Polyglot Notebooks extension to execute this code. See the chapter details for more.

#!markdown

[Additional resources available online](https://mattonml.net/books/datascience/extending-polyglot/)

#!markdown

## Understanding default formatting behavior

#!csharp

public class Footballer 
{
    public string Name {get; set;}
    public string Position {get; set;}
    public decimal AverageGoals {get; set;}
    public decimal AverageAssists {get; set;}
    protected decimal? GoalToAssistRatio 
        => AverageAssists > 0 
            ? AverageGoals / AverageAssists
            : null;
}

#!markdown

### Default object formatting

#!csharp

using System.Text.Json;
using System.IO;

string json = File.ReadAllText("Footballers.json");
List<Footballer> team = JsonSerializer.Deserialize<List<Footballer>>(json);

Footballer bestPlayer = team.OrderByDescending(p => p.AverageGoals).First();
bestPlayer

#!markdown

### Default collection formatting

#!csharp

team

#!csharp

using Microsoft.DotNet.Interactive.Formatting;

Formatter.ListExpansionLimit = 5;
team

#!markdown

## Styling output with custom formatters

#!csharp

Formatter.Register<IEnumerable<Footballer>>((players, writer) =>
{
    writer.WriteLine("<h3>Team Scoring Stats</h3>");
    writer.WriteLine("<table>");
    writer.WriteLine("<thead><tr>");
    writer.WriteLine("<th>Name</th><th>Position</th><th>Avg Goals</th><th>Avg Assists</th>");
    writer.WriteLine("</tr></thead><tbody>");
    foreach (var p in players)
    {
        writer.WriteLine("<tr>");
        writer.WriteLine($"<td>{p.Name}</td>");
        writer.WriteLine($"<td>{p.Position}</td>");
        writer.WriteLine($"<td>{p.AverageGoals}</td>");
        writer.WriteLine($"<td>{p.AverageAssists}</td>");
        writer.WriteLine("</tr>");
    }
    writer.WriteLine("</tbody></table>");
}, "text/html");

team.Take(5)

#!markdown

[Formatting Documentation](https://github.com/dotnet/interactive/blob/main/docs/formatting.md)

#!markdown

## Exploring magic commands

#!csharp

#!about

#!csharp

#!time

for (int i = 0; i < int.MaxValue; i++) {
    // Do nothing
}

#!csharp

#!lsmagic

#!markdown

[Magic Command Documentation](https://github.com/dotnet/interactive/blob/main/docs/magic-commands.md)

#!markdown

## Creating a Polyglot Notebook extension

#!markdown

[Extension Documentation](https://github.com/dotnet/interactive/blob/main/docs/extending-dotnet-interactive.md)

[Magic Command API Redesign Documentation](https://github.com/dotnet/interactive/issues/3567)

#!markdown

### Simple Extension

#!csharp

using Microsoft.DotNet.Interactive;
using Microsoft.DotNet.Interactive.Directives;

KernelActionDirective coinFlip = new("#!flip-coin")
{
    Description = "Flips a virtual coin and displays the result.",
};

#!csharp

Random random = new();

Kernel.Root.AddDirective(coinFlip, 
    (command, context) => {
        string result = random.Next(0, 2) == 0 
            ? "Heads" 
            : "Tails";

        context.Display(result);

        return Task.CompletedTask;
    }
);

#!csharp

#!flip-coin

#!csharp

#!lsmagic

#!markdown

## Working with Parameters

#!csharp

using System.Reflection;

Dictionary<string, string> ReflectObject(object obj)
{
    Dictionary<string, string> properties = new();

    Type t = obj.GetType();
    BindingFlags flags = BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic;
    foreach (var prop in t.GetProperties(flags))
    {
        object? value = prop.GetValue(obj);
        properties[prop.Name] = value?.ToString() ?? "null";
    }
    return properties;
}
ReflectObject(bestPlayer)

#!csharp

KernelDirectiveParameter varName = new("--variable-name") {
  Description = "The name of the variable",
  Required = true,
  AllowImplicitName = true
};

#!csharp

KernelActionDirective reflectDirective = new("#!reflect") {
  Description = "Reflects the internal state of the object",
  Parameters = { varName }
};

#!csharp

using Microsoft.DotNet.Interactive.Commands;
using System.CommandLine;

public class VariableNameCommand : KernelCommand
{
    public string VariableName { get; set; }
}

#!csharp

using Microsoft.DotNet.Interactive;
using Microsoft.DotNet.Interactive.CSharp;

CSharpKernel csKernel = (CSharpKernel) Kernel.Current.FindKernelByName("csharp");

csKernel.AddDirective<VariableNameCommand>(reflectDirective, 
    (command, context) => {
        string name = command.VariableName;
        if (csKernel.TryGetValue(name, out object obj)) {
            var properties = ReflectObject(obj);
            properties.Display();            
        } else {
            context.DisplayStandardError($"Can't find {name}");
        }

        return Task.CompletedTask;
    }
);

#!csharp

#!reflect --variable-name bestPlayer

#!csharp

#!reflect bestPlayer

#!markdown

## Invoking code on kernels

#!csharp

string[] steps = new[]
{
    "Load Data",
    "Train / Test Split",
    "Training",
    "Evaluation",
    "Inferencing"
};
steps

#!csharp

string GenerateMermaidFlowchart(IEnumerable<string> items)
{
    List<string> itemList = items?.ToList() ?? new();
    StringBuilder sb = new();
    sb.AppendLine("flowchart LR");

    string first = items.FirstOrDefault() ?? "No Items";
    sb.AppendLine($"    s0[{first}]");
    for (int i = 1; i < itemList.Count; i++)
    {
        sb.AppendLine($"    s{i - 1} --> s{i}[{itemList[i]}]");
    }
    return sb.ToString();
}

GenerateMermaidFlowchart(steps)

#!mermaid

flowchart LR
    s1[Load Data] 
    s1 --> s2[Train / Test Split]
    s2 --> s3[Training]
    s3 --> s4[Evaluation]
    s4 --> s5[Inferencing]

#!csharp

Kernel mermaidKernel = Kernel.Current.FindKernelByName("mermaid");
mermaidKernel

#!csharp

KernelActionDirective flowchartDirective = new("#!flow")
{
    Description = "Generates a Mermaid diagram consisting of a flowchart of sequential items",
    Parameters = { varName }
};

#!csharp

csKernel.AddDirective<VariableNameCommand>(flowchartDirective, 
    async (command, context) => {
        string name = command.VariableName;
        if (csKernel.TryGetValue(name, out object obj)) {
            IEnumerable<string> items = (IEnumerable<string>) obj;

            string md = GenerateMermaidFlowchart(items.ToArray());

            context.DisplayStandardOut(md);

            SubmitCode submitCommand = new(md, targetKernelName: mermaidKernel.Name);
            var root = context.HandlingKernel.RootKernel;
            await root.SendAsync(submitCommand);
        } else {
            context.DisplayStandardError($"Could not find {name}");
        }
    }
);

#!csharp

#!flow steps

#!markdown

## Additional Resources
[Additional resources available online](https://mattonml.net/books/datascience/extending-polyglot/)
