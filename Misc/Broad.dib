#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"}]}}

#!csharp

#r "nuget:Microsoft.Data.Analysis"

using Microsoft.Data.Analysis;

#!csharp

DataFrame dfPlayers = DataFrame.LoadCsv("../data/original/players.csv");

dfPlayers.Head(5)

#!csharp

DataFrame dfClubs = DataFrame.LoadCsv("../data/original/clubs.csv");

dfClubs.Head(5)

#!csharp

DataFrame dfLineups = DataFrame.LoadCsv("../data/original/game_lineups.csv", guessRows: 70); // https://github.com/dotnet/machinelearning/issues/5884

dfLineups.Head(5)

#!csharp

DataFrame dfEvents = DataFrame.LoadCsv("../data/original/game_events.csv");

dfEvents.Head(5)

#!csharp

DataFrame dfAppearances = DataFrame.LoadCsv("../data/original/appearances.csv");

dfAppearances.Head(5)

#!csharp

dfAppearances.Columns.Add(new SingleDataFrameColumn("games_played", Enumerable.Repeat(1f, dfAppearances.Rows.Count()).ToArray()));

#!csharp

dfAppearances.Columns.Add(new SingleDataFrameColumn("Year", dfAppearances["date"].Cast<DateTime>().Select(d => (float)d.Year)));
dfAppearances.Head(5)

#!csharp

DataFrame dfAppearancesThisSeason = dfAppearances.Filter(dfAppearances["Year"].ElementwiseEquals(2023));
dfAppearancesThisSeason.Head(5)

#!csharp

DataFrame dfAppearancesLastSeason = dfAppearances.Filter(dfAppearances["Year"].ElementwiseEquals(2022));
dfAppearancesLastSeason.Head(5)

#!csharp

DataFrame dfStatsThisSeason = dfAppearancesThisSeason.GroupBy("player_id").Sum(["yellow_cards", "red_cards", "goals", "assists", "minutes_played", "games_played"]);
dfStatsThisSeason.Head(5)

#!csharp

DataFrame dfStatsPrevSeason = dfAppearancesLastSeason.GroupBy("player_id").Sum(["yellow_cards", "red_cards", "goals", "assists", "minutes_played", "games_played"]);
dfStatsPrevSeason.Head(5)

#!csharp

DataFrame dfGames = DataFrame.LoadCsv("../data/original/games.csv", guessRows: 15);

dfGames.Head(5)

#!csharp

DataFrame dfStats = dfStatsThisSeason.Merge<int>(dfStatsPrevSeason, leftJoinColumn: "player_id", rightJoinColumn: "player_id", leftSuffix: "_current", rightSuffix: "_previous");
dfStats.Head(5)

#!csharp

dfStats.Columns.Remove("player_id_previous");
dfStats["player_id_current"].SetName("player_id");
dfStats.Head(5)

#!csharp

DataFrame dfPlayerStats = dfPlayers.Merge<int>(dfStats, leftJoinColumn: "player_id", rightJoinColumn: "player_id", joinAlgorithm: JoinAlgorithm.Inner, leftSuffix: "");
dfPlayerStats.Columns.Remove("player_id_right");
dfPlayerStats.Head(5)

#!csharp

dfEvents["type"].Cast<string>().Distinct()

#!csharp

var shootoutFilter = dfEvents["type"].ElementwiseEquals<string>("Shootout"); // PrimitiveDataFrameColumn<bool>
DataFrame dfShootoutEvents = dfEvents.Filter(shootoutFilter);

dfShootoutEvents.Head(5)

#!csharp

dfShootoutEvents.Columns.Add(new SingleDataFrameColumn("ShootoutAppearances", Enumerable.Repeat(1f, dfShootoutEvents.Rows.Count()).ToArray()));
dfShootoutEvents.Head(5)

#!csharp

dfShootoutEvents["description"].Cast<string>().Distinct()

#!csharp

dfShootoutEvents["Scored"] = dfShootoutEvents["description"].ElementwiseEquals<string>(", Scored");
dfShootoutEvents.Head(5)

#!csharp

dfShootoutEvents["Scored"].Cast<bool>().Select(s => s == true ? 1 : 0)

#!csharp

dfShootoutEvents.Columns.Add(new SingleDataFrameColumn("ShootoutGoals", dfShootoutEvents["Scored"].Cast<bool>().Select(s => s == true ? 1f : 0f)));
dfShootoutEvents.Head(5)

#!csharp

dfShootoutEvents.Columns.Remove("date");
dfShootoutEvents.Columns.Remove("game_id");
dfShootoutEvents.Columns.Remove("minute");
dfShootoutEvents.Columns.Remove("type");
dfShootoutEvents.Columns.Remove("club_id");
dfShootoutEvents.Columns.Remove("description");
dfShootoutEvents.Columns.Remove("game_event_id");
dfShootoutEvents.Columns.Remove("player_in_id");
dfShootoutEvents.Columns.Remove("player_assist_id");

dfShootoutEvents.Head(5)

#!csharp

var dfShootoutEventsGrouped = dfShootoutEvents.GroupBy("player_id").Sum(["ShootoutGoals", "ShootoutAppearances"]);
dfShootoutEventsGrouped.Head(5)

#!csharp

dfShootoutEventsGrouped["ShootoutScoringPercent"] = dfShootoutEventsGrouped["ShootoutGoals"] / dfShootoutEventsGrouped["ShootoutAppearances"];
dfShootoutEventsGrouped.Head(5)

#!csharp

dfPlayerStats.Head(5)

#!csharp

var dfPlayerShootouts = dfPlayerStats.Merge<int>(dfShootoutEventsGrouped, leftJoinColumn: "player_id", rightJoinColumn: "player_id", joinAlgorithm: JoinAlgorithm.Left, leftSuffix: "");
dfPlayerShootouts.Columns.Remove("player_id_right");
dfPlayerShootouts.Head(5)

#!csharp

dfPlayerShootouts["ShootoutGoals"].FillNulls(0, inPlace: true);
dfPlayerShootouts["ShootoutAppearances"].FillNulls(0, inPlace: true);
dfPlayerShootouts.Head(5)

#!csharp

// Remove unnecessary columns
string[] columnsToDrop = new string[] { "first_name", "last_name", "name", "last_season", "player_id", "index", "current_club_id", "player_code", "city_of_birth", "country_of_citizenship", "date_of_birth", "contract_expiration_date", "agent_name", "image_url", "url", "current_club_domestic_competition_id", "current_club_name", "country_of_birth", "foot", "ShootoutScoringPercent"};
foreach (string columnName in columnsToDrop) {
    dfPlayerShootouts.Columns.Remove(columnName);
}

dfPlayerShootouts.Head(5)

#!csharp

DataFrame.SaveCsv(dfPlayerShootouts, "../data/original/training.csv")
