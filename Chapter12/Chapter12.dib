#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"}]}}

#!markdown

# AI Orchestration

#!csharp

using Microsoft.DotNet.Interactive;

string chatModelName = "gpt-4o-deployment";

string url = 
    await Kernel.GetInputAsync("Enter your Azure OpenAI Endpoint");

PasswordString key = 
    await Kernel.GetPasswordAsync("Enter your Azure OpenAI key");

#!csharp

#r "nuget:Microsoft.SemanticKernel,1.16.0"

using Microsoft.SemanticKernel;
using Microsoft.SemanticKernel.Connectors.OpenAI;
using Kernel = Microsoft.SemanticKernel.Kernel;

#!csharp

IKernelBuilder builder = Kernel.CreateBuilder();

builder.AddAzureOpenAIChatCompletion(
    deploymentName: chatModelName,
    endpoint: url,
    apiKey: key.GetClearTextPassword());

Kernel kernel = builder.Build();

#!csharp

string coachPrompt = @"{{$input}}

Respond to the user as if you are a professional European football coach giving players advice during a match. Focus on brief tidbits of football wisdom.";

OpenAIPromptExecutionSettings settings = new() { 
    MaxTokens = 100,
};

KernelFunction coach = kernel.CreateFunctionFromPrompt(coachPrompt, 
    executionSettings: settings, 
    functionName: "CoachPersonality", 
    description: "A personality prompt for giving advice to players in a football match");

#!csharp

KernelArguments data = new() { 
    ["input"] = "What is the time?" 
};

Console.WriteLine(await kernel.InvokeAsync(coach, data))

#!csharp

string butlerPrompt = @"{{$input}}

You are the butler to a crime-fighting vigilante. Keep your responses professional, but wry. Be helpful, encouraging, and encourage caution.";

KernelFunction butler = kernel.CreateFunctionFromPrompt(butlerPrompt, 
    executionSettings: settings,
    functionName: "ButlerPersonality",
    description: "A personality prompt for a butler to a crime-fighting vigilante");

Console.WriteLine(await kernel.InvokeAsync(butler, data))

#!markdown

## Memory

#!csharp

#r "nuget: Microsoft.SemanticKernel.Plugins.Memory, 1.16.0-alpha"

using Microsoft.SemanticKernel.Memory;

#!csharp

#pragma warning disable SKEXP0001, SKEXP0010, SKEXP0050

string embedDeployment = "text-embedding-ada-002";

MemoryBuilder memoryBuilder = new();
memoryBuilder.WithAzureOpenAITextEmbeddingGeneration(
        embedDeployment,
        url, 
        key.GetClearTextPassword(),
        "model-id");

memoryBuilder.WithMemoryStore(new VolatileMemoryStore());

#!csharp

#pragma warning disable SKEXP0001
ISemanticTextMemory memory = memoryBuilder.Build();

string collection = "FootballFacts";
string[] facts = new[] {
        "Our next opponent is the Purple Cobras",
        "Our team is the Silver Robots.",
        "The author of this book would make a terrible footballer.",
        "Our home pitch is at Packt Stadium",
        $"Today is {DateTime.Now.ToShortDateString()}"        
};

for (int i = 0; i < facts.Length; i++)
{
    await memory.SaveInformationAsync(collection, id: $"Fact{i}", text: facts[i]);
}

#!csharp

#pragma warning disable SKEXP0001
string query = "Tell me about our team";
IAsyncEnumerable<MemoryQueryResult> results = 
    memory.SearchAsync(collection, query, limit: 3);
await foreach (var result in results) {
    double relevance = result.Relevance;
    string text = result.Metadata.Text;
    string id = result.Metadata.Id;
    Console.WriteLine($"{id}: {text} ({relevance:P1})");
}

#!markdown

## Defining Complex Functions

#!csharp

KernelFunction timeFunc = kernel.CreateFunctionFromMethod(
        () => DateTime.Now.ToShortTimeString(), 
        "GetCurrentTime", 
        "Retrieves the current time in the local time zone.");

await kernel.InvokeAsync(timeFunc)

#!csharp

Dictionary<string, string> teamRecords = new() {
    { "Purple Cobras", "5 wins, 0 losses, 0 ties" },
    { "Orange Donkeys", "0 wins, 4 losses, 1 tie" },
    { "Silver Robots", "2 wins, 2 losses, 1 tie" },
    { "Maroon Baboons", "1 win, 2 losses, 2 ties" },
};
teamRecords

#!csharp

KernelFunction teamInfoFunc = 
    kernel.CreateFunctionFromMethod((string teamName) => {
        if (teamRecords.ContainsKey(teamName)) {
            return teamRecords[teamName];
        } else {
            return "There is no information on that team.";
        }
    }, 
    "GetTeamInsights", 
    "Retrieves insights about a specific team");

KernelArguments args = new KernelArguments { 
    ["teamName"] = "Silver Robots" 
};
await kernel.InvokeAsync(teamInfoFunc, args)

#!csharp

KernelFunction searchFunc = 
    kernel.CreateFunctionFromMethod(async (string query) => {
        var results = memory.SearchAsync(collection, query, limit: 1);
        await foreach (var result in results) {
            return result.Metadata.Text;
        }
        return "No information found.";
    }, 
    "SearchMemory", 
    "Searches the memory for information");

KernelArguments args = new KernelArguments { 
    ["query"] = "How good of a footballer would the author be?" 
};
await kernel.InvokeAsync(searchFunc, args)

#!markdown

## Plugins

#!csharp

KernelPlugin plugin = 
    kernel.ImportPluginFromFunctions("FootballPlugin",
        "A collection of functions related to football",
        functions: [ coach, timeFunc, teamInfoFunc, searchFunc ]);

#!csharp

OpenAIPromptExecutionSettings settings = new() { 
    MaxTokens = 100,
    ToolCallBehavior = ToolCallBehavior.AutoInvokeKernelFunctions 
};

settings

#!csharp

var result = await kernel.InvokePromptAsync("Are the orange donkeys any good?", new KernelArguments(settings));
Console.WriteLine(result);
result

#!csharp

FunctionResult result = await kernel.InvokePromptAsync(
  "Coach, what time is it? Who are we playing anyways? Are they good?", 
  new KernelArguments(settings));
result

#!markdown

## Planners

#!csharp

#r "nuget:Microsoft.SemanticKernel.Planners.OpenAI,1.16.0-preview"

using Microsoft.SemanticKernel.Planning;

#pragma warning disable SKEXP0060

builder.Plugins.Add(plugin);
var kernel = builder.Build();

FunctionCallingStepwisePlanner planner = new();

await planner.ExecuteAsync(kernel, "Coach, what time is it? Who are we playing anyways? Are they good?")
