#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"}]}}

#!markdown

# Chapter 9: Beyond AutoML: Pipelines, Trainers, & Transforms

#!markdown

[Additional resources available online](https://mattonml.net/books/datascience/beyond-AutoML/)

#!markdown

## Performing regression without AutoML

#!csharp

#r "nuget:Microsoft.ML,3.0.1"
#r "nuget:Microsoft.ML.AutoML,0.21.1"
#r "nuget:Microsoft.Data.Analysis,0.21.1"

using Microsoft.Data.Analysis;
using Microsoft.ML;
using Microsoft.ML.Data;
using Microsoft.ML.AutoML;
using Microsoft.ML.AutoML.CodeGen;
using Microsoft.ML.Trainers;
using Microsoft.ML.Trainers.FastTree;
using Microsoft.ML.SearchSpace;
using Microsoft.ML.SearchSpace.Option;
using Microsoft.ML.Runtime;

MLContext context = new(seed: 123);

#!mermaid

erDiagram
    CITY {
        int city_id PK
        string name
        string state_abbreviation FK
    }
    STATE {
        string state_abbreviation PK
        string name
        int country_id FK
    }
    COUNTRY {
        int country_id PK
        string name
    }
    COUNTRY ||--|{ STATE : "Has"
    STATE ||--|{ CITY : "Has"
    CITY ||--o| STATE : "Is capital of"
    CITY ||--o| COUNTRY : "Is capital of"

#!csharp

DataFrame df = DataFrame.LoadCsv("training.csv");

DataOperationsCatalog.TrainTestData split = 
    context.Data.TrainTestSplit(df, testFraction: 0.2, seed: 123);

#!csharp

string label = "CurrentPay";
uint maxSeconds = 10;

context.Auto().CreateRegressionExperiment(maxSeconds)
       .Execute(split.TrainSet, 
		     split.TestSet, 
		     labelColumnName: label)

#!markdown

### Features and Pipelines

#!mermaid

flowchart LR
    data[("Training 
        Data")]
    subgraph Pipeline
        replace["Replace Missing 
            Values"]
        oneHot["One-Hot 
            Encode"]
        featurize["Featurize 
            Text"]
        concat["Concatenate 
            Features"]
        train["Fast Forest 
            Regression"]
    end
    trained[/"Trained 
        Model"/]
    data --> replace --> oneHot --> featurize --> concat --> train --> trained

#!markdown

### Manual Regression

#!csharp

string[] numericColumns = df.Columns.OfType<SingleDataFrameColumn>()
                                .Where(c => c.Name != label)
                                .Select(col => col.Name)
                                .ToArray();
numericColumns

#!csharp

var concat = context.Transforms.Concatenate(outputColumnName: "Features", numericColumns);

#!csharp

var pipeline = concat.Append(context.Regression.Trainers.FastTree(
        labelColumnName: label, 
        numberOfLeaves: 20, 
        numberOfTrees: 100, 
        minimumExampleCountPerLeaf: 10, 
        learningRate: 0.2));

#!mermaid

flowchart LR
    data[("Training 
        Data")]
    subgraph Pipeline
        concat["Concatenate 
            Features"]
        train["Fast Forest 
            Regression"]
    end
    trained[/"Trained 
        Model"/]
    data --> concat --> train --> trained

#!csharp

ITransformer model = pipeline.Fit(split.TrainSet);
model

#!csharp

IDataView transformed = model.Transform(split.TestSet);

context.Regression.Evaluate(transformed, labelColumnName: label)

#!csharp

// We can manually get predictions
model.Transform(split.TestSet).ToDataFrame()["Score"]

#!markdown

## Creating an AutoML pipeline

#!csharp

var pipeline = context.Auto().Featurizer(df, excludeColumns: [label, "Name"])
    .Append(context.Auto().Regression(labelColumnName: label));

#!csharp

AutoMLExperiment experiment = context.Auto().CreateExperiment()
    .SetPipeline(pipeline)
    .SetDataset(split)
    .SetRegressionMetric(RegressionMetric.MeanAbsoluteError, 
                         labelColumn: label)
    .SetTrainingTimeInSeconds(10);

TrialResult result = await experiment.RunAsync();
ITransformer model = result.Model;
model

#!csharp

IDataView transformed = model.Transform(split.TestSet);

context.Regression.Evaluate(transformed, labelColumnName: label)

#!markdown

## Controlling AutoML pipelines

#!markdown

### Customizing the Featurizer

#!csharp

public class ColumnData {
    public List<string> Text {get; set;} = new();
    public List<string> Numeric {get; set;} = new();
    public List<string> Categorical {get; set;} = new();
    public List<string> Excluded {get; set;} = new();
}

#!csharp

var columnInfo = new ColumnData();
columnInfo.Excluded.Add(label);
columnInfo.Excluded.Add("Name");

#!csharp

foreach (var col in df.Columns)
{
    if (columnInfo.Excluded.Contains(col.Name))
    {
        continue;
    }

    if (col.GetType() == typeof(StringDataFrameColumn))
    {
        if (col.ValueCounts().Rows.Count < 15)
        {
            columnInfo.Categorical.Add(col.Name);
        }
        else
        {
            columnInfo.Text.Add(col.Name);
        }
    }
    else if (col.GetType() == typeof(BooleanDataFrameColumn) || 
             col.GetType() == typeof(PrimitiveDataFrameColumn<bool>))
    {
        columnInfo.Categorical.Add(col.Name);
    }
    else
    {
        columnInfo.Numeric.Add(col.Name);
    }
}
columnInfo

#!csharp

SweepablePipeline basePipeline = context.Auto()
    .Featurizer(df, 
                numericColumns: columnInfo.Numeric.ToArray(), 
                textColumns: columnInfo.Text.ToArray(),
                catelogicalColumns: columnInfo.Categorical.ToArray(),
                excludeColumns: columnInfo.Excluded.ToArray());

#!markdown

### Customizing the model trainer selector

#!csharp

SweepablePipeline pipeline = basePipeline.Append(
   context.Auto().Regression(
        labelColumnName: label, 
        useFastTree: true, 
        useFastForest: true, 
        useLgbm: false, 
        useLbfgsPoissonRegression: false,
        useSdca: false)
  );

#!csharp

AutoMLExperiment experiment = context.Auto().CreateExperiment()
    .SetPipeline(pipeline)
    .SetDataset(split)
    .SetRegressionMetric(RegressionMetric.RSquared, labelColumn: label)
    .SetTrainingTimeInSeconds(10);

TrialResult result = await experiment.RunAsync();
ITransformer model = result.Model;

IDataView transformed = model.Transform(split.TestSet);

context.Regression.Evaluate(transformed, labelColumnName: label)

#!markdown

## Customizing hyperparameter tuning

#!markdown

### Understanding the search space

#!csharp

SearchSpace<FastForestOption> searchSpace = new();
searchSpace

#!markdown

A simple decision tree

#!mermaid

flowchart TD
    node1{"> 5 Goals?"}
    node2{"> 20 Games?"}
    node3{"Position == 'Attack'?"}
    node1 -- Yes --> node2
    node1 -- No --> node3
    node2 -- Yes --> leaf1["12 million euros"]
    node2 -- No --> leaf2["8 million euros"]
    node3 -- Yes --> leaf3["4 million euros"]
    node3 -- No --> leaf4["2 million euros"]

#!csharp

searchSpace["NumberOfTrees"] = 
  new UniformIntOption(1, 12, defaultValue: 4);
searchSpace["NumberOfLeaves"] = 
  new UniformIntOption(10, 100, defaultValue: 30);

#!csharp

var estimator = context.Auto().CreateSweepableEstimator(
  (context, options) => 
    context.Regression.Trainers.FastForest(
        labelColumnName: label,
        numberOfLeaves: options.NumberOfLeaves,
        numberOfTrees: options.NumberOfTrees,
        minimumExampleCountPerLeaf: 11
    ), searchSpace);
SweepablePipeline pipeline = basePipeline.Append(estimator);

#!csharp

AutoMLExperiment experiment = context.Auto().CreateExperiment()
    .SetPipeline(pipeline)
    .SetDataset(split)
    .SetRegressionMetric(RegressionMetric.MeanAbsoluteError, labelColumn: label)
    .SetTrainingTimeInSeconds(120)
    .SetEciCostFrugalTuner();

TrialResult result = await experiment.RunAsync();

ITransformer model = result.Model;
IDataView transformed = model.Transform(split.TestSet);

context.Regression.Evaluate(transformed, labelColumnName: label)

#!markdown

### Customizing the hyperparameter tuner

#!csharp

AutoMLExperiment experiment = context.Auto()
  .CreateExperiment()
  .SetPipeline(pipeline)
  .SetDataset(split)
  .SetRegressionMetric(RegressionMetric.MeanAbsoluteError,
                       labelColumn: label)
  .SetTrainingTimeInSeconds(10)
  .SetSmacTuner();

#!csharp

TrialResult result = await experiment.RunAsync();

ITransformer model = result.Model;
IDataView transformed = model.Transform(split.TestSet);

context.Regression.Evaluate(transformed, labelColumnName: label)

#!markdown

## Scaling numeric columns

#!csharp

    SweepablePipeline pipeline = basePipeline.Append(
      context.Auto().Regression(
        labelColumnName: label, 
        useFastTree: false, 
        useFastForest: false, 
        useLgbm: false, 
        useLbfgsPoissonRegression: true,
        useSdca: false)
  );

#!csharp

InputOutputColumnPair[] pairs = 
  columnInfo.Numeric.Select(c => new InputOutputColumnPair(c, c))
		   .ToArray();
var minMax = context.Transforms.NormalizeMinMax(pairs);

#!csharp

SweepablePipeline scaledPipeline = minMax.Append(pipeline);

#!csharp

AutoMLExperiment experiment = context.Auto().CreateExperiment()
    .SetPipeline(scaledPipeline)
    .SetDataset(split)
    .SetRegressionMetric(RegressionMetric.MeanAbsoluteError, labelColumn: label)
    .SetTrainingTimeInSeconds(120)
    .SetEciCostFrugalTuner();

TrialResult result = await experiment.RunAsync();

ITransformer model = result.Model;
IDataView transformed = model.Transform(split.TestSet);

context.Regression.Evaluate(transformed, labelColumnName: label)

#!markdown

## Additional Resources

[Additional resources available online](https://mattonml.net/books/datascience/beyond-AutoML/)
