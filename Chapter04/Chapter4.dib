#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"}]}}

#!markdown

# Chapter 4: Working with Tabular Data and DataFrames

#!markdown

## Working with DataFrames in C#

#!csharp

#r "nuget:Microsoft.Data.Analysis,0.21.1"

#!csharp

using Microsoft.Data.Analysis;

DataFrame dfPlayers = DataFrame.LoadCsv("Players.csv");

#!markdown

### Viewing and Sampling Data

#!csharp

dfPlayers

#!csharp

dfPlayers.Head(5)

#!csharp

dfPlayers.Tail(5)

#!csharp

dfPlayers.Sample(5)

#!markdown

### Rows

#!csharp

dfPlayers.Rows.GetType()

#!csharp

DataFrameRow row = dfPlayers.Rows[4];
row

#!markdown

### Getting and setting cell values

#!csharp

row["height_in_cm"]

#!csharp

row[9] // 10th column - height_in_cm

#!csharp

dfPlayers.Rows[4]["height_in_cm"]

#!csharp

dfPlayers.Rows[0]["country_of_birth"]

#!csharp

dfPlayers.Rows[0]["country_of_birth"] = "United States"

#!markdown

### Iterating over rows

#!csharp

HashSet<string> usAnalogues = new() {"US", "USA", "America", "U.S.", "Untied States"}; 

foreach (var row in dfPlayers.Rows)
{
    if (usAnalogues.Contains(row["country_of_birth"])) {
        row["country_of_birth"] = "United States";
        Console.WriteLine($"Corrected country for {row["name"]}");
    }
}

#!markdown

## Working with columns

#!markdown

### Columns

#!csharp

dfPlayers.Columns.GetType()

#!csharp

dfPlayers.Columns

#!csharp

dfPlayers.Columns.Select(c => c.Name)

#!csharp

dfPlayers.Columns.Select(c => c.GetType().Name)

#!csharp

dfPlayers.Columns["position"]

#!markdown

### Analyzing columns

#!csharp

dfPlayers["position"]

#!csharp

dfPlayers["position"].Info()

#!csharp

dfPlayers["position"].ValueCounts()

#!csharp

// dfPlayers["position"].Description(); // errors
dfPlayers["position"].HasDescription()

#!csharp

dfPlayers["height_in_cm"]

#!csharp

dfPlayers["height_in_cm"].Info()

#!markdown

### Tabulating value occurrences with ValueCounts

#!csharp

dfPlayers["height_in_cm"].ValueCounts()

#!markdown

### Getting values from a column

#!csharp

var colHeight = (SingleDataFrameColumn)dfPlayers["height_in_cm"];
float?[] values = colHeight.ToArray();
values

#!csharp

float?[] values = ((SingleDataFrameColumn)dfPlayers["height_in_cm"]).ToArray();
values

#!markdown

### Removing Columns

#!csharp

dfPlayers.Columns.Remove("country_of_citizenship");
dfPlayers.Columns.Select(c => c.Name)

#!csharp

string[] columnsToRemove = {"ColA", "ColB", "ColC"};

foreach (var col in columnsToRemove) 
{
    dfPlayers.Columns.Remove(col);
}

#!markdown

### Renaming Columns

#!csharp

dfPlayers["player_id"].SetName("Id")

#!csharp

dfPlayers["Id"]

#!markdown

### Adding a new column

#!csharp

dfPlayers.Head(1)

#!csharp

IEnumerable<int?> years = ((DateTimeDataFrameColumn)dfPlayers["date_of_birth"]).Select<DateTime?, int?>(d => d.HasValue ? d.Value.Year : null);
dfPlayers["BirthYear"] = new Int32DataFrameColumn("BirthYear", years);
dfPlayers["BirthYear"].ValueCounts()

#!csharp

var colDob = ((DateTimeDataFrameColumn)dfPlayers["date_of_birth"]);
IEnumerable<int?> years = colDob.Select<DateTime?, int?>(d => d.HasValue ? d.Value.Year : null);
years

#!csharp

dfPlayers["BirthYear"] = new Int32DataFrameColumn("BirthYear", years)

#!csharp

DateTime.Now.Year - dfPlayers["BirthYear"]

#!csharp

dfPlayers["Age"] = DateTime.Now.Year - dfPlayers["BirthYear"]

#!csharp

var dfAges = DateTime.Now.Year - dfPlayers["BirthYear"];
dfAges

#!markdown

## Handling missing Values

#!csharp

dfPlayers["height_in_cm"]

#!csharp

dfPlayers["height_in_cm"].Median()

#!csharp

int medianHeight = (int)dfPlayers["height_in_cm"].Median();
int meanHeight = (int)Math.Round(dfPlayers["height_in_cm"].Mean());

new {median=medianHeight, mean=meanHeight}

#!csharp

dfPlayers["height_in_cm"] = dfPlayers["height_in_cm"].FillNulls(medianHeight)

#!csharp

// This errors since not every column supports 0 for missing values
dfPlayers.FillNulls(0)

#!markdown

## Sorting, filtering, grouping, and merging data

#!csharp

dfPlayers.Head(1)

#!markdown

### Sorting DataFrames

#!csharp

dfPlayers.OrderBy("name").Head(3)

#!csharp

dfPlayers.OrderByDescending("name").Head(3)

#!csharp

dfPlayers.Head(5)

#!csharp

dfPlayers = dfPlayers.OrderBy("date_of_birth");
dfPlayers.Head(3)

#!markdown

### Grouping and aggregating DataFrames

#!csharp

DataFrame dfStats = DataFrame.LoadCsv("PlayerGameStats.csv");
dfStats.Head(5)

#!csharp

dfStats["GamesPlayed"] = new Int32DataFrameColumn("GamesPlayed", Enumerable.Repeat(1, (int)dfStats.Rows.Count))

#!csharp

dfStats.GroupBy("player_id").Sum(new string[] {"minutes_played", "goals", "assists", "yellow_cards", "red_cards", "GamesPlayed"})

#!csharp

var dfStatsByPlayer = dfStats.GroupBy("player_id")
    .Mean(new[] {"minutes_played", "goals", "assists", "yellow_cards", "red_cards"});

dfStatsByPlayer.Head(5)

#!markdown

### Merging DataFrames

#!csharp

dfStatsByPlayer.Columns.Select(c => c.Name)

#!csharp

dfPlayers.Columns.Select(c => c.Name)

#!mermaid

erDiagram
    dfPlayers {
        int Id
        string name
        int current_club_id
        string country_of_birth
        DateTime date_of_birth
        string sub_position
        string position
        bool foot
        int height_in_cm
        int market_value_in_eur
        int BirthYear
        int Age
    }
    dfStatsByPlayer {
        int player_id
        float minutes_played
        float goals
        float assists
        float yellow_cards
        float red_cards
    }

#!csharp

DataFrame dfJoined = dfPlayers.Merge<int>(dfStatsByPlayer, 
    leftJoinColumn: "Id",
    rightJoinColumn: "player_id",    
    joinAlgorithm: JoinAlgorithm.Inner);

dfJoined.Head(5)

#!csharp

dfJoined.Columns.Select(c => c.Name)

#!csharp

dfJoined.Columns.Remove("player_id")

#!csharp

dfJoined.Rows.Count

#!csharp

dfPlayers.Rows.Count

#!markdown

### Additional Joining
This section sets us up better for future chapters, but was not included in the book's text to avoid repetition.

#!csharp

DataFrame dfClubs = DataFrame.LoadCsv("Clubs.csv");
dfClubs

#!csharp

dfJoined = dfJoined.Merge<int>(dfClubs, leftJoinColumn:"current_club_id", rightJoinColumn:"club_id");
dfJoined.Head(1)

#!csharp

dfJoined.Columns.Remove("current_club_id"); // club_id is descriptive enough
dfJoined["name_right"].SetName("club_name"); // More readable
dfJoined.Head(5)

#!csharp

DataFrame dfClubGames = DataFrame.LoadCsv("ClubGames.csv");
dfClubGames.Head(5)

#!csharp

// Representing wins and losses as separte numeric columns since ties are possible. Numeric columns can be easily averaged to get win / loss rates
dfClubGames["WinRate"] = new Int32DataFrameColumn("Wins", ((PrimitiveDataFrameColumn<bool>)dfClubGames["Result"].ElementwiseEquals(0f)).Select<bool?, int>(b => b == true ? 1 : 0));
dfClubGames["LossRate"] = new Int32DataFrameColumn("Wins", ((PrimitiveDataFrameColumn<bool>)dfClubGames["Result"].ElementwiseEquals(1f)).Select<bool?, int>(b => b == true ? 1 : 0));

dfClubGames.Head(5)

#!csharp

DataFrame dfClubGamesAgg = dfClubGames.GroupBy("ClubId").Mean(new[] {"WinRate", "LossRate", "GoalsFor", "GoalsAgainst"});
dfClubGamesAgg.Head(5)

#!csharp

// Add in win rate, loss rate, goals for, and goals against
dfJoined = dfJoined.Merge<int>(dfClubGamesAgg, leftJoinColumn: "club_id", rightJoinColumn:"ClubId", leftSuffix: "");
dfJoined.Head(5)

#!csharp

dfJoined.Columns.Remove("club_id");
dfJoined.Columns["name_left"].SetName("Name");
dfJoined.Columns["country_of_birth"].SetName("BirthCountry");
dfJoined.Columns["date_of_birth"].SetName("DateOfBirth");
dfJoined.Columns["sub_position"].SetName("SubPosition");
dfJoined.Columns["height_in_cm"].SetName("Height");
dfJoined.Columns["market_value_in_eur"].SetName("MarketValue");
dfJoined.Columns["minutes_played"].SetName("MinutesPlayed");
dfJoined.Columns["foot"].SetName("Foot");
dfJoined.Columns["goals"].SetName("Goals");
dfJoined.Columns["assists"].SetName("Assists");
dfJoined.Columns["yellow_cards"].SetName("YellowCards");
dfJoined.Columns["red_cards"].SetName("RedCards");
dfJoined.Columns["club_name"].SetName("ClubName");

dfJoined.Head(5)

#!markdown

### Filtering DataFrames

#!csharp

PrimitiveDataFrameColumn<bool> attackFilter = dfJoined["position"].ElementwiseEquals("Attack");
attackFilter.ValueCounts()

#!csharp

DataFrame dfAttackers = dfJoined.Filter(attackFilter);
dfAttackers.Head(5)

#!markdown

---

Final export of the chapter's data. This will be the data source used in Chapter 5

#!csharp

DataFrame.SaveCsv(dfJoined, "JoinedStats.csv")
