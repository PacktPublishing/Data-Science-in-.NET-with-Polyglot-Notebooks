#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"}]}}

#!markdown

# Chapter 6: Visualizing Variable Relationships

#!markdown

[Additional resources available online](https://mattonml.net/books/datascience/correlations/)

#!markdown

## Performing multivariate analysis with Plotly.NET

#!fsharp

#r "nuget:Microsoft.Data.Analysis,0.21.1"
#r "nuget:Plotly.NET,5.0.0"
#r "nuget:Plotly.NET.Interactive,5.0.0"
#r "nuget:MathNet.Numerics,5.0.0"

open MathNet.Numerics.Statistics
open Plotly.NET
open Microsoft.Data.Analysis

#!fsharp

let df = DataFrame.LoadCsv("JoinedStats.csv")
df.Columns.Remove("Id")
df.Columns.Remove("club_id")

let marketValues = df["market_value_in_eur"] |> Seq.cast<single>
let positions = df["position"] |> Seq.cast<string>
let clubs = df["club_name"] |> Seq.cast<string>
let goals = df["goals"] |> Seq.cast<single>
let assists = df["assists"] |> Seq.cast<single>
let minutesPerGame = df["minutes_played"] |> Seq.cast<single>
let playerNames = df["name"] |> Seq.cast<string>
let redCards = df["red_cards"] |> Seq.cast<single>

#!markdown

### Multivariate analysis with box and violin plots

#!fsharp

Chart.BoxPlot(Y = marketValues, X = positions)
    |> Chart.withTitle "Player Market Value Distribution by Position"
    |> Chart.withSize(500, 350)

#!fsharp

Chart.Violin(Y = marketValues, X = positions)
    |> Chart.withTitle "Player Market Value Distribution by Position"
    |> Chart.withSize(500, 350)

#!fsharp

Chart.BoxPlot(Y = minutesPerGame, X = positions)
    |> Chart.withTitle "Playtime by Position"
    |> Chart.withSize(500, 350)

#!fsharp

Chart.BoxPlot(Y = marketValues, X = clubs, MultiText=playerNames)
    |> Chart.withTitle "Market Value by Club"
    |> Chart.withSize(700, 400)

#!fsharp

Chart.BoxPlot(Y = goals, X = clubs, MultiText=playerNames)
    |> Chart.withTitle "Goals per game by Club"
    |> Chart.withSize(700, 400)

#!markdown

### Plotting multiple values with scatter plots

#!fsharp

Chart.Point(x = goals, 
            y = minutesPerGame,
            MultiText = playerNames)
    |> Chart.withTitle "Goals per Game vs Minutes per Game"
    |> Chart.withXAxisStyle(TitleText = "Goals per Game")
    |> Chart.withYAxisStyle(TitleText = "Minutes per Game")

#!fsharp

Chart.Point(x = minutesPerGame, 
            y = marketValues,
            MultiText = playerNames)
    |> Chart.withTitle "Market Valuation vs Playtime"
    |> Chart.withSize(600, 400)    
    |> Chart.withXAxisStyle(TitleText = "Minutes per Game")
    |> Chart.withYAxisStyle(TitleText = "Market Valuation")

#!fsharp

Chart.Point(x = goals, 
            y = assists,
            MultiText = playerNames)
    |> Chart.withTitle "Goals vs Assists Per Game"
    |> Chart.withSize(400, 400)    
    |> Chart.withXAxisStyle(TitleText = "Goals", MinMax=(0,2))
    |> Chart.withYAxisStyle(TitleText = "Assists", MinMax=(0,2))

#!markdown

### Adding color to a scatter plot

#!fsharp

Chart.Point(x = goals, 
            y = assists,
            MultiText = playerNames,
            MarkerColor = (Color.fromColorScaleValues minutesPerGame))
    |> Chart.withTitle "Goals vs Assists Colorized by Play Time"
    |> Chart.withSize(400, 400)    
    |> Chart.withXAxisStyle(TitleText = "Goals", MinMax=(-0.1,1.6))
    |> Chart.withYAxisStyle(TitleText = "Assists", MinMax=(-0.1,1.6))
    |> Chart.withMarkerStyle(ShowScale = true)

#!fsharp

Chart.Point(x = goals, 
            y = assists,
            MultiText = playerNames,
            MarkerColor = (Color.fromColorScaleValues marketValues))
    |> Chart.withTitle "Goals vs Assists Colorized by Valuation"
    |> Chart.withSize(400, 400)    
    |> Chart.withXAxisStyle(TitleText = "Goals", MinMax=(-0.1,1.6))
    |> Chart.withYAxisStyle(TitleText = "Assists", MinMax=(-0.1,1.6))
    |> Chart.withMarkerStyle(ShowScale = true)

#!markdown

### 3D Scatter plots with Plotly.NET

#!fsharp

Chart.Point3D(x = goals, 
              y = assists, 
              z = marketValues, 
              MultiText = playerNames,
              MarkerColor = (Color.fromColorScaleValues marketValues))
    |> Chart.withTitle "Goals vs Assists vs Valuation"
    |> Chart.withXAxisStyle(TitleText = "Goals", Id = StyleParam.SubPlotId.Scene 1)
    |> Chart.withYAxisStyle(TitleText = "Assists", Id = StyleParam.SubPlotId.Scene 1)
    |> Chart.withZAxisStyle(TitleText = "MarketValue")
    |> Chart.withSize (800, 600)

#!fsharp

Chart.Point3D(x = goals, 
              y = assists, 
              z = marketValues, 
              MultiText = playerNames,
              MarkerColor = (Color.fromColorScaleValues minutesPerGame))
    |> Chart.withTitle "Goals vs Assists vs Valuation"
    |> Chart.withXAxisStyle(TitleText = "Goals", Id = StyleParam.SubPlotId.Scene 1)
    |> Chart.withYAxisStyle(TitleText = "Assists", Id = StyleParam.SubPlotId.Scene 1)
    |> Chart.withZAxisStyle(TitleText = "MarketValue")
    |> Chart.withSize (800, 600)

#!markdown

## Identifying variable correlations

#!markdown

### Calculating variable correlations

#!fsharp

Correlation.Pearson(goals |> Seq.map float, 
                    assists |> Seq.map float)

#!fsharp

Correlation.Pearson(assists |> Seq.map float, 
                    redCards |> Seq.map float)

#!markdown

### Building feature correlation matrixes

#!fsharp

df.Columns 
    |> Seq.map (fun col -> col.Name) 
    |> Array.ofSeq

#!fsharp

let columnsToAnalyze = 
    df.Columns 
    |> Seq.filter (fun col -> col.GetType() =typeof<SingleDataFrameColumn>)
    |> Seq.map (fun col -> col.Name)
    |> Array.ofSeq

let numColumns = Array.length columnsToAnalyze

columnsToAnalyze

#!fsharp

let results : float[][] = Array.zeroCreate numColumns
for y = 0 to numColumns - 1 do
    let colY = df[columnsToAnalyze[y]] 
                |> Seq.cast<single> 
                |> Seq.map float
    let rowResults : float[] = Array.create numColumns nan
    results.[y] <- rowResults

    for x = 0 to y do
        let colX = df[columnsToAnalyze[x]]
                        |> Seq.cast<single> 
                        |> Seq.map float
        rowResults.[x] <- Correlation.Pearson(colX, colY)

results

#!fsharp

Chart.Heatmap(zData=results, 
            ReverseYAxis=true,
            X=columnsToAnalyze,
            Y=columnsToAnalyze)
    |> Chart.withTitle "Correlation Matrix"

#!markdown

## More complex version
Function-oriented and supports boolean columns as well

#!fsharp

let IdentifyColumnsToAnalyze (df: DataFrame) =
    df.Columns 
    |> Seq.filter (fun col ->
            let t = col.GetType()
            t = typeof<SingleDataFrameColumn> || t = typeof<PrimitiveDataFrameColumn<bool>>
        )
    |> Seq.map (fun col -> col.Name)
    |> Array.ofSeq

#!fsharp

open System

let getSingleFromBool (input: Nullable<bool>): single =
    match input.HasValue with
        | false -> 0f
        | true -> 
            match input.Value with
            | true -> 1.0f
            | false -> 0.0f

let getColumnValue( df: DataFrame, colName: string) : float seq =
    match df.Columns.[colName] with
    | :? SingleDataFrameColumn as singleCol ->
        singleCol 
        |> Seq.cast<single> 
        |> Seq.map float
    | :? PrimitiveDataFrameColumn<bool> as boolCol ->
        boolCol
        |> Seq.map getSingleFromBool
        |> Seq.map float
    | _ -> // Expand to support additional types as needed
        Seq.empty<float>

#!fsharp

let buildCorrelationMatrix (df: DataFrame) =
    // Figure out what columns we're analyzing
    let columnsToAnalyze = df |> IdentifyColumnsToAnalyze
    let numColumns = Array.length columnsToAnalyze
    
    // Build a jagged array containing the correlation results
    let results : float[][] = Array.zeroCreate numColumns
    for y = 0 to numColumns - 1 do
        let colY = getColumnValue(df, columnsToAnalyze[y])
        let rowResults : float[] = Array.create numColumns nan
        results.[y] <- rowResults

        for x = 0 to y do
            let colX = getColumnValue(df, columnsToAnalyze[x])
            rowResults.[x] <- Correlation.Pearson(colX, colY)
    
    // Return a tuple with the results and the columns analyzed
    results, columnsToAnalyze

#!fsharp

let results, correlationColumns = buildCorrelationMatrix(df)
results

#!fsharp

let plotCorrelationMatrix (correlationMatrix, correlationColumns) =
    Chart.Heatmap(zData=correlationMatrix, 
                ReverseYAxis=true,
                X=correlationColumns,
                Y=correlationColumns)
        |> Chart.withTitle "Correlation Matrix"

df 
|> buildCorrelationMatrix 
|> plotCorrelationMatrix
|> Chart.withTitle "Feature Correlations for Football Players"

#!fsharp

// This shows that age and BirthYear are inversely correlated. Let's remove BirthYear
df.Columns.Remove("BirthYear")

#!markdown

## One Hot Encoding
Let's add some boolean columns

#!fsharp

let oneHotEncodeColumn (df: DataFrame, column: StringDataFrameColumn) =
    let values = column |> Seq.distinct

    for v in values do
        df["Is " + v + "?"] <- column.ElementwiseEquals(v)

#!fsharp

// Let's add some columns for positions
oneHotEncodeColumn(df, df["position"] :?> StringDataFrameColumn)

#!fsharp

// Let's re-render
df 
|> buildCorrelationMatrix 
|> plotCorrelationMatrix
|> Chart.withTitle "Feature Correlations for Football Players"

#!fsharp

// Let's add some columns for sub-positions
oneHotEncodeColumn(df, df["sub_position"] :?> StringDataFrameColumn)

#!fsharp

// Let's re-render
df 
|> buildCorrelationMatrix 
|> plotCorrelationMatrix
|> Chart.withTitle "Feature Correlations for Football Players"

#!markdown

## Additional Resources
[Additional resources available online](https://mattonml.net/books/datascience/correlations/)
