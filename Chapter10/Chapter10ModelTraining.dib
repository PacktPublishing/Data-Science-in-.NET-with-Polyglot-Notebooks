#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"}]}}

#!markdown

## Chapter 10

This notebook contains details of training the multi-class classification model used in this chapter

#!csharp

#r "nuget:Microsoft.ML,3.0.1"
#r "nuget:Microsoft.ML.AutoML,0.21.1"
#r "nuget:Microsoft.Data.Analysis,0.21.1"

using Microsoft.Data.Analysis;
using Microsoft.ML;
using Microsoft.ML.Data;
using Microsoft.ML.AutoML;
using Microsoft.ML.Trainers;
using Microsoft.ML.Trainers.FastTree;

#!csharp

DataFrame df = DataFrame.LoadCsv("../data/winloss.csv");
df.Sample(5)

#!csharp

MLContext context = new(seed: 123);
var split = context.Data.TrainTestSplit(data: df, testFraction: 0.2, seed: 42);

#!csharp

MulticlassExperimentSettings settings = new() {
    MaxExperimentTimeInSeconds = 10,
    OptimizingMetric = MulticlassClassificationMetric.MacroAccuracy
};

MulticlassClassificationExperiment exp = 
    context.Auto().CreateMulticlassClassificationExperiment(settings);

#!csharp

ExperimentResult<MulticlassClassificationMetrics> result = 
    exp.Execute(split.TrainSet, split.TestSet);
ITransformer model = result.BestRun.Model;
model

#!csharp

MulticlassClassificationMetrics metrics = result.BestRun.ValidationMetrics;
metrics.Display();
metrics.ConfusionMatrix.GetFormattedConfusionTable()

#!csharp

public class PredictionRequest
{
    public float OurPosition { get; set; }
    public float OpponentPosition { get; set; }
    public float OurGoalsLast3Games {get; set;}
    public float OpponentGoalsLast3Games {get; set;}
    public bool IsHome { get; set; }
    public string Label {get; set;}
}

#!csharp

public class PredictionResult 
{
    public string PredictedLabel {get; set;}
    public float[] Score {get; set;}
}

#!csharp

var engine = context.Model.CreatePredictionEngine<PredictionRequest, PredictionResult>(model);

engine.Predict(new PredictionRequest() {
    OurPosition = 1,
    OpponentPosition = 3,
    OurGoalsLast3Games = 4,
    OpponentGoalsLast3Games = 2,
    IsHome = true,
})

#!csharp

context.Model.Save(model: model, 
    inputSchema: split.TrainSet.Schema, 
    filePath: "WinLossPredictorApi/WinLossPredictor.zip");

#!csharp

string modelPath = "WinLossPredictorApi/WinLossPredictor.zip";
ITransformer loadedModel = context.Model.Load(modelPath, out _);

#!csharp

#r "nuget:Microsoft.ML.OnnxConverter,0.21.1"
using System.IO;

using (FileStream stream = File.Create("./WinLossPredictor.onnx")) {
    context.Model.ConvertToOnnx(model, df, stream);
}

#!csharp

#r "nuget:Microsoft.ML.OnnxTransformer,3.0.1"
#r "nuget:Microsoft.ML.OnnxRuntime,1.18.1"

using Microsoft.ML.Transforms.Onnx;

OnnxScoringEstimator estimator = context.Transforms.ApplyOnnxModel("WinLossPredictor.onnx");
