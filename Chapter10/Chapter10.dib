#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"}]}}

#!markdown

## Chapter 10: Deploying machine learning models

This notebook contains details of training the multi-class classification model used in this chapter.

Other parts of this chapter will occur in the `WinLossPredictorApi` folder's `WinLossPredictorApi.sln` file and are not covered by this notebook.

#!markdown

[Additional resources available online](https://mattonml.net/books/datascience/model-deploy/)

#!markdown

## Introducing our multi-class classification model

#!csharp

#r "nuget:Microsoft.ML,3.0.1"
#r "nuget:Microsoft.ML.AutoML,0.21.1"
#r "nuget:Microsoft.Data.Analysis,0.21.1"

using Microsoft.Data.Analysis;
using Microsoft.ML;
using Microsoft.ML.Data;
using Microsoft.ML.AutoML;
using Microsoft.ML.Trainers;
using Microsoft.ML.Trainers.FastTree;

#!csharp

DataFrame df = DataFrame.LoadCsv("../data/winloss.csv");
df.Sample(5)

#!markdown

### Training our model

#!csharp

MLContext context = new(seed: 123);
var split = context.Data.TrainTestSplit(data: df, testFraction: 0.2, seed: 42);

#!csharp

var metric = MulticlassClassificationMetric.MacroAccuracy;

MulticlassExperimentSettings settings = new() {
  MaxModels = 10,
  OptimizingMetric = metric
};

MulticlassClassificationExperiment exp = context.Auto()
	.CreateMulticlassClassificationExperiment(settings);

#!csharp

ExperimentResult<MulticlassClassificationMetrics> result = 
    exp.Execute(split.TrainSet, split.TestSet);
ITransformer model = result.BestRun.Model;
model

#!csharp

MulticlassClassificationMetrics metrics = result.BestRun.ValidationMetrics;
metrics.ConfusionMatrix.GetFormattedConfusionTable()

#!markdown

### Evaluating multi-class classification models

#!csharp

MulticlassClassificationMetrics metrics = result.BestRun.ValidationMetrics;
metrics.Display();
metrics.ConfusionMatrix.GetFormattedConfusionTable()

#!markdown

### Generating test predictions

#!csharp

public class PredictionRequest
{
    public float OurPosition { get; set; }
    public float OpponentPosition { get; set; }
    public float OurGoalsLast3Games {get; set;}
    public float OpponentGoalsLast3Games {get; set;}
    public bool IsHome { get; set; }
    public string Label {get; set;}
}

#!csharp

public class PredictionResult 
{
    public string PredictedLabel {get; set;}
    public float[] Score {get; set;}
}

#!csharp

var engine = context.Model.CreatePredictionEngine<PredictionRequest, PredictionResult>(model);

engine.Predict(new PredictionRequest() {
    OurPosition = 1,
    OpponentPosition = 3,
    OurGoalsLast3Games = 5,
    OpponentGoalsLast3Games = 2,
    IsHome = true,
})

#!markdown

## Exporting ML.NET models

#!csharp

context.Model.Save(model: model, 
    inputSchema: split.TrainSet.Schema, 
    filePath: "WinLossPredictorApi/WinLossPredictor.zip");

#!csharp

string modelPath = "WinLossPredictorApi/WinLossPredictor.zip";
ITransformer loadedModel = context.Model.Load(modelPath, out _);

#!markdown

## Additional Resources

[Additional resources available online](https://mattonml.net/books/datascience/model-deploy/)
