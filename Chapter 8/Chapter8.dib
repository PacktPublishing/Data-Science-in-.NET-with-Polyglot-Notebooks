#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"}]}}

#!markdown

# Chapter 8

#!markdown

## Regression in a Pipeline

#!csharp

#r "nuget:Microsoft.Data.Analysis,0.21.1"

using Microsoft.Data.Analysis;

DataFrame df = DataFrame.LoadCsv("training.csv");
df.Head(5)

#!csharp

#r "nuget:Microsoft.ML,3.0.1"
#r "nuget:Microsoft.ML.AutoML,0.21.1"

using Microsoft.ML;
using Microsoft.ML.Data;
using Microsoft.ML.AutoML;
using Microsoft.ML.AutoML.CodeGen;
using Microsoft.ML.Trainers;
using Microsoft.ML.Trainers.FastTree;
using Microsoft.ML.SearchSpace;
using Microsoft.ML.Runtime;

MLContext context = new();

#!csharp

DataOperationsCatalog.TrainTestData split = 
    context.Data.TrainTestSplit(df, testFraction: 0.2);

#!csharp

public class ColumnTypes {
    public List<string> Text {get; set;} = new();
    public List<string> Numeric {get; set;} = new();
    public List<string> Categorical {get; set;} = new();
    public List<string> Excluded {get; set;} = new();
}

#!csharp

string label = "CurrentPay";

var columnInfo = new ColumnTypes();
columnInfo.Excluded.Add(label);
columnInfo.Excluded.Add("Name");

foreach (var col in df.Columns)
{
    if (columnInfo.Excluded.Contains(col.Name))
    {
        continue;
    }

    if (col.GetType() == typeof(StringDataFrameColumn))
    {
        if (col.ValueCounts().Rows.Count < 15)
        {
            columnInfo.Categorical.Add(col.Name);
        }
        else
        {
            columnInfo.Text.Add(col.Name);
        }
    }
    else if (col.GetType() == typeof(BooleanDataFrameColumn))
    {
        columnInfo.Categorical.Add(col.Name);
    }
    else
    {
        columnInfo.Numeric.Add(col.Name);
    }
}

columnInfo

#!csharp

SweepablePipeline pipeline = context.Auto()
    .Featurizer(df, 
                numericColumns: columnInfo.Numeric.ToArray(), 
                textColumns: columnInfo.Text.ToArray(),
                catelogicalColumns: columnInfo.Categorical.ToArray(),
                excludeColumns: columnInfo.Excluded.ToArray())
    .Append(context.Auto().Regression(labelColumnName: label));

#!csharp

AutoMLExperiment experiment = context.Auto().CreateExperiment()
    .SetPipeline(pipeline)
    .SetRegressionMetric(RegressionMetric.RSquared, labelColumn: label)
    .SetTrainingTimeInSeconds(10)
    .SetDataset(split);

#!csharp

TrialResult result = await experiment.RunAsync();

#!markdown

Note: trying to display the result errors due to the implementation of `TrialResult`

#!csharp

result.Metric

#!csharp

ITransformer model = result.Model;
model

#!csharp

IDataView transformed = model.Transform(split.TestSet);

context.Regression.Evaluate(transformed, labelColumnName: label)

#!csharp

public void PrintImportances(ITransformer model, IDataView transformed, string label, int permutations = 3, int features = 10)
{
	var importance = context.Regression
		.PermutationFeatureImportance(
			model, 
			transformed, 
			labelColumnName: label,
			permutationCount: 3);

	var orderedFeatures = importance.OrderByDescending(k => 
		Math.Abs(k.Value.MeanAbsoluteError.Mean));

	foreach (var kvp in orderedFeatures.Take(10)) {
		double avgImpact = kvp.Value.MeanAbsoluteError.Mean;
		Console.WriteLine($"{kvp.Key} {avgImpact}");
	}
}

// PrintImportances(model, transformed, label);

#!markdown

## Additional Control

#!csharp

SweepablePipeline pipeline = context.Auto()
    .Featurizer(df, 
                numericColumns: columnInfo.Numeric.ToArray(), 
                textColumns: columnInfo.Text.ToArray(),
                catelogicalColumns: columnInfo.Categorical.ToArray(),
                excludeColumns: columnInfo.Excluded.ToArray());

#!csharp

  pipeline = pipeline.Append(context.Auto().Regression(
    labelColumnName: label, 
    useFastTree: true, 
    useFastForest: false, 
    useLgbm: false, 
    useLbfgsPoissonRegression: false,
    useSdca: false));

#!csharp

AutoMLExperiment experiment = context.Auto().CreateExperiment()
    .SetPipeline(pipeline)
    .SetRegressionMetric(RegressionMetric.RSquared, labelColumn: label)
    .SetTrainingTimeInSeconds(10)
    .SetDataset(split);

TrialResult result = await experiment.RunAsync();

ITransformer model = result.Model;
model

#!csharp

IDataView transformed = model.Transform(split.TestSet);

context.Regression.Evaluate(transformed, labelColumnName: label)

#!csharp

// PrintImportances(model, transformed, label);

#!markdown

## Even more control

#!csharp

var searchSpace = new SearchSpace<FastForestOption>();
searchSpace

#!csharp

// Create a sweepable pipeline using a FastForest regression model by calling context.Auto().CreateSweepableEstimator
SweepableEstimator estimator = context.Auto().CreateSweepableEstimator((context, options) => 
    context.Regression.Trainers.FastForest(labelColumnName: label, 
                                           numberOfLeaves: options.NumberOfLeaves, 
                                           numberOfTrees: options.NumberOfTrees), 
searchSpace);

#!csharp

SweepablePipeline pipeline = context.Auto()
    .Featurizer(df, 
                numericColumns: columnInfo.Numeric.ToArray(), 
                textColumns: columnInfo.Text.ToArray(),
                catelogicalColumns: columnInfo.Categorical.ToArray(),
                excludeColumns: columnInfo.Excluded.ToArray())
    .Append(estimator);

#!csharp

AutoMLExperiment experiment = context.Auto().CreateExperiment()
    .SetPipeline(pipeline)
    .SetRegressionMetric(RegressionMetric.RSquared, labelColumn: label)
    .SetTrainingTimeInSeconds(25)
    .SetDataset(split)
    // or .SetEciCostFrugalTuner();
    // or .SetSmacTuner();
    // or .SetRandomSearchTuner();
    // or .SetCostFrugalTuner();
    // or .SetTuner<YourTuner>();
    .SetGridSearchTuner();

TrialResult result = await experiment.RunAsync();

ITransformer model = result.Model;
model

#!csharp

IDataView transformed = model.Transform(split.TestSet);

context.Regression.Evaluate(transformed, labelColumnName: label)

#!markdown

## I said MORE Control!

#!csharp

using System.Threading;

public class CustomTrialRunner : ITrialRunner {

    public CustomTrialRunner(MLContext context, SweepablePipeline pipeline, DataOperationsCatalog.TrainTestData split, string label) {
        _pipeline = pipeline;
        _context = context;
        _split = split;
        _label = label;
    }

    private readonly string _label;
    private readonly MLContext _context;
    private readonly SweepablePipeline _pipeline;
    private readonly DataOperationsCatalog.TrainTestData _split;

    public async Task<TrialResult> RunAsync(TrialSettings settings, CancellationToken token) {
        Console.WriteLine($"Running trial " + settings.TrialId);

        try
        {
            // Use parameters to build pipeline
            var pipeline = _pipeline.BuildFromOption(_context, settings.Parameter);

            // Train model
            var model = pipeline.Fit(_split.TrainSet);

            // Evaluate the model
            var predictions = model.Transform(_split.TestSet);

            // Get metrics
            var evaluationMetrics = _context.Regression.Evaluate(predictions, labelColumnName: _label);

            Console.WriteLine("Resulting metric: " + evaluationMetrics.RSquared);

            return await Task.FromResult(new TrialResult()
            {
                Metric = evaluationMetrics.RSquared,
                Model = model,
                TrialSettings = settings
            });
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error: " + ex.Message);
            return await Task.FromResult(new TrialResult()
            {
                Metric = double.MinValue,
                Model = null,
                TrialSettings = settings,
                DurationInMilliseconds = 0,
            });
        }
    }

    public void Dispose() {
        
    }
}

#!csharp

public class CustomTuner : ITuner {
    private readonly Random _rnd = new Random();

    public CustomTuner(SearchSpace space) {
        _searchSpace = space;
    }

    private readonly SearchSpace _searchSpace;

    public Parameter Propose(TrialSettings settings) {
        int d = _searchSpace.FeatureSpaceDim;
        double[] featureVec = Enumerable.Repeat(0, d).Select(i => _rnd.NextDouble()).ToArray();

        var parameter = _searchSpace.SampleFromFeatureSpace(featureVec);
        settings.Parameter["_pipeline_"] = parameter;
        
        return parameter;
    }

    public void Update(TrialResult result) {
    }
}

#!csharp

var searchSpace = new SearchSpace<LgbmOption>();
searchSpace

#!csharp

// Create a sweepable pipeline using a FastForest regression model by calling context.Auto().CreateSweepableEstimator
SweepableEstimator estimator = context.Auto().CreateSweepableEstimator((context, options) => 
    context.Regression.Trainers.LightGbm(labelColumnName: label, 
                                         numberOfLeaves: options.NumberOfLeaves, 
                                         minimumExampleCountPerLeaf: options.MinimumExampleCountPerLeaf,
                                         learningRate: options.LearningRate), 
searchSpace);

#!csharp

SweepablePipeline pipeline = context.Auto()
    .Featurizer(df, 
                numericColumns: columnInfo.Numeric.ToArray(), 
                textColumns: columnInfo.Text.ToArray(),
                catelogicalColumns: columnInfo.Categorical.ToArray(),
                excludeColumns: columnInfo.Excluded.ToArray())
    .Append(estimator);

#!csharp

AutoMLExperiment experiment = context.Auto().CreateExperiment()
    .SetPipeline(pipeline)
    .SetRegressionMetric(RegressionMetric.RSquared, labelColumn: label)
    .SetTrainingTimeInSeconds(10)
    .SetDataset(split)
    .SetTuner<CustomTuner>(t => new CustomTuner(searchSpace))
    .SetTrialRunner(new CustomTrialRunner(context, pipeline, split, label));

TrialResult result = await experiment.RunAsync();

ITransformer model = result.Model;
model

#!csharp

IDataView transformed = model.Transform(split.TestSet);

context.Regression.Evaluate(transformed, labelColumnName: label)

#!csharp

//PrintImportances(model, transformed, label);

#!markdown

## Let's do it manually!

#!csharp

string[] allColumns = columnInfo.Numeric.ToArray();
allColumns

#!csharp

var pipeline = context.Transforms.Categorical.OneHotEncoding("Position")
    .Append(context.Transforms.Concatenate("Features", allColumns))
    .Append(context.Regression.Trainers.FastTree(labelColumnName: label));

#!csharp

ITransformer model = pipeline.Fit(split.TrainSet);
model

#!csharp

IDataView transformed = model.Transform(split.TestSet);

context.Regression.Evaluate(transformed, labelColumnName: label)
